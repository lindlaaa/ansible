---
# https://kubernetes.io/blog/2019/03/15/kubernetes-setup-using-ansible-and-vagrant/
# https://docs.docker.com/engine/install/ubuntu/#installation-methods
- hosts: all
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    become: true
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - ca-certificates
      - curl
      - gnupg
  
  - name: Move keyring
    become: true
    command: install -m 0755 -d /etc/apt/keyrings

  - name: Add repo using key from URL
    become: true
    ansible.builtin.deb822_repository:
      name: docker-repo
      types: deb
      uris: https://download.docker.com/linux/ubuntu
      suites: '{{ ansible_distribution_release }}'
      components: stable
      architectures: amd64
      signed_by: https://download.docker.com/linux/ubuntu/gpg

  - name: Run the equivalent of "apt-get update" as a separate step
    become: true
    apt:
      update_cache: yes

  - name: Install docker packages
    become: true
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl
  - name: Install k8s pre packages
    become: true
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - gpg

  - name: Add k8s repo using key from URL
    become: true
    ansible.builtin.deb822_repository:
      name: k8s-repo
      types: deb
      uris: https://pkgs.k8s.io/core:/stable:/v1.28/deb/
      suites: /
      architectures: amd64
      signed_by: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key

  - name: Run the equivalent of "apt-get update" as a separate step
    become: true
    apt:
      update_cache: yes

  - name: Install k8s packages
    become: true
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - kubelet
      - kubeadm
      - kubectl

  - name: Add owner user to docker group
    become: true
    user:
      name: owner
      group: docker

  - name: Remove swapfile from /etc/fstab
    become: true
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    become: true
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Configure node ip
    become: true
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      create: yes

  - name: Restart kubelet
    become: true
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
    
  # - name: Initialize the Kubernetes cluster using kubeadm
  #   become: true
  #   command: kubeadm init --apiserver-advertise-address="{{ node_ip }}" --apiserver-cert-extra-sans="{{ node_ip }}"  --node-name {{ node_name }} --pod-network-cidr=192.168.11.0/24
  #   when: isMaster

  # - name: Setup kubeconfig for owner user
  #   become: true
  #   command: "{{ item }}"
  #   with_items:
  #    - mkdir -p /home/owner/.kube
  #    - cp -i /etc/kubernetes/admin.conf /home/owner/.kube/config
  #    - chown owner:owner /home/owner/.kube/config
  
  # - name: Install calico pod network
  #   become: false
  #   command: kubectl create -f https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml

  # - name: Generate join command
  #   command: kubeadm token create --print-join-command
  #   register: join_command
  #   when: isMaster

  # - name: Copy join command to local file
  #   local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
  #   when: isMaster

  handlers:
    - name: docker status
      service: name=docker state=started

# Your Kubernetes control-plane has initialized successfully!

# To start using your cluster, you need to run the following as a regular user:

#   mkdir -p $HOME/.kube
#   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#   sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Alternatively, if you are the root user, you can run:

#   export KUBECONFIG=/etc/kubernetes/admin.conf

# You should now deploy a pod network to the cluster.
# Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
#   https://kubernetes.io/docs/concepts/cluster-administration/addons/

# You can now join any number of the control-plane node running the following command on each as root:

#   kubeadm join 192.168.10.1:80 --token 30o7qx.dxsihufby36tm8wy \
# 	--discovery-token-ca-cert-hash sha256:d24325088f4a28bd2919dff7d32ae248b0f6cc55526326d0784006da4091b4a3 \
# 	--control-plane --certificate-key fb0d254b2288b6e25e66adff287796e6461a57089cdbb8769595928ca406bbd9

# Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
# As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
# "kubeadm init phase upload-certs --upload-certs" to reload certs afterward.

# Then you can join any number of worker nodes by running the following on each as root:

# kubeadm join 192.168.10.1:80 --token 30o7qx.dxsihufby36tm8wy \
# 	--discovery-token-ca-cert-hash sha256:d24325088f4a28bd2919dff7d32ae248b0f6cc55526326d0784006da4091b4a3 